<?php

/**
 * @file
 * Test the Reroute Email module.
 */

/**
 * Tests email rerouting for the site-wide Core Contact form.
 */
class RerouteEmailContactTestCase extends DrupalWebTestCase {
  protected $adminUser;

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Site-wide Core Contact form email rerouting',
      'description' => "Test Reroute Email module's ability to reroute mail sent from the Core Contact module forms.",
      'group' => 'Reroute Email',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('reroute_email', 'contact');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer contact forms',
      'access site-wide contact form',
      'administer reroute email',
    ));
  }

  /**
   * Basic tests for reroute_email.
   *
   * @todo: There are enough of these now that they can be refactored into
   * some decent utility functions, instead of all this copy and paste.
   */
  public function testBasicNotification() {
    $reroute_destination = "rerouted@example.com";
    $original_destination = "original@example.com";
    $additional_destination = "additional@example.com";
    // Login the admin user.
    $this->drupalLogin($this->adminUser);

    // Configure to reroute normally to rerouted@example.com.
    $post = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings to send to $original_destination.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));

    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    $this->assertMail('to', $reroute_destination, format_string("Email was rerouted to @address", array('@address' => $reroute_destination)));
    $search_for = t("Originally to: @to", array('@to' => $original_destination));
    $has_info = preg_match("/$search_for/", $mail['body']);
    $this->assertTrue($has_info, 'Found the correct "Originally to" line in the body');
    $this->verbose(t('Email body was: <pre>@mail_body</pre>', array('@mail_body' => $mail['body'])));
    $this->assertTrue(strpos($mail['body'], 'Originally to') !== FALSE, 'Body does contain "Originally to"');

    // Now try sending to one of the additional email addresses that should
    // not be rerouted. Configure two email addresses in reroute form.
    // Body injection is still turned on.
    $post = array(
      'reroute_email_enable' => TRUE,
      'reroute_email_address' => "$reroute_destination, $additional_destination",
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings to point to the additional recipient.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $additional_destination), t('Save'));

    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);;
    $this->assertMail('to', $additional_destination, 'Email was not rerouted because destination was in whitelist');

    // Now change the configuration to disable reroute and set the original
    // email recipients.
    $post = array(
      'reroute_email_enable' => FALSE,
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
    // Set the contact form to send to original_destination.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));
    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Mail should not be rerouted - should go to $original_destination.
    $this->assertMail('to', $original_destination, 'Mail not rerouted - sent to original destination.');
    $this->verbose(t("Email 'to' was: <pre>@mail_to</pre>", array('@mail_to' => $mail['to'])));

    // Configure to reroute without body injection.
    $post = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => FALSE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // There should be nothing in the body except the contact message - no
    // body injection like 'Originally to'.
    $this->assertTrue(strpos($mail['body'], 'Originally to') === FALSE, 'Body does not contain "Originally to"');
    $this->assertTrue($mail['headers']['X-Rerouted-Original-To'] == $original_destination, 'X-Rerouted-Original-To is correctly set to the original destination email');
  }
}

/**
 * Tests email rerouting for the Test Email form.
 */
class RerouteEmailTestEmailTestCase extends DrupalWebTestCase {
  protected $adminUser;

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Test Email form',
      'description' => "Test Reroute Email's form for sending a test email.",
      'group' => 'Reroute Email',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('reroute_email');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer reroute email',
    ));
  }

  /**
   * Basic tests for reroute_email Test Email form.
   *
   * @todo: There are enough of these now that they can be refactored into
   * some decent utility functions, instead of all this copy and paste.
   */
  public function testFormTestEmail() {
    $reroute_destination = "rerouted@example.com";
    // Login the admin user.
    $this->drupalLogin($this->adminUser);

    // Configure to reroute normally to rerouted@example.com.
    $post_settings = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post_settings, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Check Subject field default value.
    $this->drupalGet("admin/config/development/reroute_email/test");
    $this->assertFieldByName('subject', t("Reroute Email Test"), 'The expected default value was found for the Subject field.');

    // Submit the Test Email form to send an email to be rerouted.
    $post = array(
      'to' => "to@example.com",
      'cc' => "cc@example.com",
      'bcc' => "bcc@example.com",
      'subject' => "Test Reroute Email Test Email Form",
      'body' => 'Testing email rerouting and the Test Email form',
    );
    $this->drupalPost("admin/config/development/reroute_email/test", $post, t("Send email"));
    $this->assertText(t("Test email submitted for delivery."));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Check rerouted email to.
    $this->assertMail('to', $reroute_destination, format_string('To email address was rerouted to @address.', array('@address' => $reroute_destination)));

    // Check the To passed through the Test Email Form.
    $search_for = t("Originally to: @to", array('@to' => $post['to']));
    $has_info = preg_match("/$search_for/", $mail['body']);
    $this->assertTrue($has_info, 'Found submitted "To" email address in the body');
    $this->verbose(t('Email body was: <pre>@mail_body</pre>', array('@mail_body' => $mail['body'])));

    // Check the Cc and Bcc headers are the ones submitted through the form.
    $this->assertTrue($mail['headers']['X-Rerouted-Original-Cc'] == $post['cc'], format_string('X-Rerouted-Original-Cc is correctly set to submitted value: @address', array('@address' => $post['cc'])));
    $this->assertTrue($mail['headers']['X-Rerouted-Original-Bcc'] == $post['bcc'], format_string('X-Rerouted-Original-Cc is correctly set to submitted value: @address', array('@address' => $post['bcc'])));
    // Check the Subject and Body field values can be found in rerouted email.
    $this->assertMail('subject', $post['subject'], format_string('Subject is correctly set to submitted value: @subject', array('@subject' => $post['subject'])));
    $this->assertFalse(strpos($mail['body'], $post['body']) === FALSE, 'Body contains the value submitted through the form');

    // Check required To field.
    $post = array(
      'to' => "",
    );
    $this->drupalPost("admin/config/development/reroute_email/test", $post, t("Send email"));
    $this->assertText(t("To field is required."));

    // Test form submission with email rerouting and invalid email addresses.
    $post = array(
      'to' => "To address invalid format",
      'cc' => "Cc address invalid format",
      'bcc' => "Bcc address invalid format",
    );
    $this->drupalPost("admin/config/development/reroute_email/test", $post, t("Send email"));
    // Successful submission with email rerouting enabled.
    $this->assertText(t("Test email submitted for delivery."));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Check rerouted email to.
    $this->assertMail('to', $reroute_destination, format_string('To email address was rerouted to @address.', array('@address' => $reroute_destination)));

    // Check the To passed through the Test Email Form.
    $search_for = t("Originally to: @to", array('@to' => $post['to']));
    $has_info = preg_match("/$search_for/", $mail['body']);
    $this->assertTrue($has_info, 'Found submitted "To" email address in the body');
    $this->verbose(t('Email body was: <pre>@mail_body</pre>', array('@mail_body' => $mail['body'])));

    // Check the Cc and Bcc headers are the ones submitted through the form.
    $this->assertTrue($mail['headers']['X-Rerouted-Original-Cc'] == $post['cc'], format_string('X-Rerouted-Original-Cc is correctly set to submitted value: @address', array('@address' => $post['cc'])));
    $this->assertTrue($mail['headers']['X-Rerouted-Original-Bcc'] == $post['bcc'], format_string('X-Rerouted-Original-Cc is correctly set to submitted value: @address', array('@address' => $post['bcc'])));

    // Now change the configuration to disable reroute and submit the Test
    // Email form with the same invalid email address values.
    $post_settings = array(
      'reroute_email_enable' => FALSE,
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable_message' => TRUE,
    );

    $this->drupalPost("admin/config/development/reroute_email", $post_settings, t('Save configuration'));
    // Submit the test email form again with previously used invalid addresses.
    $this->drupalPost("admin/config/development/reroute_email/test", $post, t("Send email"));
    // Check invalid email addresses are still passed to the mail system.
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Check rerouted email to.
    $this->assertMail('to', $post['to'], format_string('To email address is correctly set to submitted value: @address.', array('@address' => $post['to'])));
    $this->verbose(t('Sent email values: <pre>@mail</pre>', array('@mail' => var_export($mail, TRUE))));
    // Check the Cc and Bcc headers are the ones submitted through the form.
    $this->assertTrue($mail['headers']['Cc'] == $post['cc'], format_string('Cc is correctly set to submitted value: @address', array('@address' => $post['cc'])));
    $this->assertTrue($mail['headers']['Bcc'] == $post['bcc'], format_string('Bcc is correctly set to submitted value: @address', array('@address' => $post['bcc'])));
  }
}

/**
 * Test special cases for body as a string.
 */
class RerouteEmailSpecialTestCase extends DrupalWebTestCase {
  protected $adminUser;

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Email body provided as a string',
      'description' => "Support message's body passed to reroute email as a string.",
      'group' => 'Reroute Email',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    // Include hidden test helper sub-module.
    parent::setUp('reroute_email', 'reroute_email_test');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer reroute email',
      // Needed to access log messages in test.
      'access site reports',
    ));
  }

  /**
   * Test handling of message body as a string and header keys' robustness.
   */
  public function testBodyStringRobustHeaders() {
    $reroute_destination = "rerouted@example.com";
    $original_destination = "original@example.com";
    // Login the admin user.
    $this->drupalLogin($this->adminUser);

    // Configure to reroute normally to rerouted@example.com.
    $post = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Print test email values for comparing values on test results page.
    $test_message = array(
      'to' => $original_destination,
      'params' => array(
        'body' => "Test Message body is a string.",
      ),
    );
    // Send test helper sub-module's email.
    drupal_mail('reroute_email_test', 'test_reroute_email', $test_message['to'], language_default(), $test_message['params']);
    $this->verbose(t('Test email message values: <pre>@test_message</pre>', array('@test_message' => var_export($test_message, TRUE))));

    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Check rerouted email to.
    $this->assertMail('to', $reroute_destination, format_string('To email address was rerouted to @address.', array('@address' => $reroute_destination)));

    // Check original to.
    $search_for = t("Originally to: @to", array('@to' => $original_destination));
    $has_info = preg_match("/$search_for/", $mail['body']);
    $this->assertTrue($has_info, t('Found the correct "Originally to" line in the body'));
    $this->verbose(t('Email body was: <pre>@mail_body</pre>', array('@mail_body' => $mail['body'])));
    // Check if test message body is found although provided as a string.
    $this->assertTrue(strpos($mail['body'], $test_message['params']['body']) !== FALSE, 'Email body contains original message body although it was provided as a string.');

    // Check the watchdog entry logged by reroute_email_test_mail_alter.
    $this->drupalGet('admin/reports/dblog');
    $this->assertRaw(t('A String was detected in the body'), 'Recorded in recent log messages: a String was detected in the body.');
  }
}
