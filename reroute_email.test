<?php

/**
 * @file
 * Test the Reroute Email module.
 */

/**
 * Tests email rerouting for the site-wide Core Contact form.
 */
class RerouteEmailContactTestCase extends DrupalWebTestCase {
  protected $adminUser;

  /**
   * Implements DrupalWebTestCase::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Site-wide Core Contact form email rerouting',
      'description' => "Test Reroute Email module's ability to reroute mail sent from the Core Contact module forms.",
      'group' => 'Reroute Email',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('reroute_email', 'contact');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer contact forms',
      'access site-wide contact form',
      'administer reroute email',
    ));
  }

  /**
   * Basic tests for reroute_email.
   *
   * @todo: There are enough of these now that they can be refactored into
   * some decent utility functions, instead of all this copy and paste.
   */
  public function testBasicNotification() {
    $reroute_destination = "rerouted@example.com";
    $original_destination = "original@example.com";
    $additional_destination = "additional@example.com";
    // Login the admin user.
    $this->drupalLogin($this->adminUser);

    // Configure to reroute normally to rerouted@example.com.
    $post = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings to send to $original_destination.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));

    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    $this->assertMail('to', $reroute_destination, format_string("Email was rerouted to @address", array('@address' => $reroute_destination)));
    $search_for = t("Originally to: @to", array('@to' => $original_destination));
    $has_info = preg_match("/$search_for/", $mail['body']);
    $this->assertTrue($has_info, 'Found the correct "Originally to" line in the body');
    $this->verbose(t("Email body was:") . print_r("<pre>{$mail['body']}</pre>", TRUE));
    $this->assertTrue(strpos($mail['body'], 'Originally to') !== FALSE, 'Body does contain "Originally to"');

    // Now try sending to one of the additional email addresses that should
    // not be rerouted. Configure two email addresses in reroute form.
    // Body injection is still turned on.
    $post = array(
      'reroute_email_enable' => TRUE,
      'reroute_email_address' => "$reroute_destination, $additional_destination",
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings to point to the additional recipient.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $additional_destination), t('Save'));

    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);;
    $this->assertMail('to', $additional_destination, 'Email was not rerouted because destination was in whitelist');

    // Now change the configuration to disable reroute and set the original
    // email recipients.
    $post = array(
      'reroute_email_enable' => FALSE,
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable_message' => TRUE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
    // Set the contact form to send to original_destination.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));
    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Mail should not be rerouted - should go to $original_destination.
    $this->assertMail('to', $original_destination, 'Mail not rerouted - sent to original destination.');
    $this->verbose(t("Email 'to' was:") . print_r("<pre>{$mail['to']}</pre>", TRUE));

    // Configure to reroute without body injection.
    $post = array(
      'reroute_email_address' => $reroute_destination,
      'reroute_email_enable' => TRUE,
      'reroute_email_enable_message' => FALSE,
    );
    $this->drupalPost("admin/config/development/reroute_email", $post, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
    // Go to the contact page and send an email.
    $post = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $post, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // There should be nothing in the body except the contact message - no
    // body injection like 'Originally to'.
    $this->assertTrue(strpos($mail['body'], 'Originally to') === FALSE, 'Body does not contain "Originally to"');
    $this->assertTrue($mail['headers']['X-Rerouted-Original-To'] == $original_destination, 'X-Rerouted-Original-To is correctly set to the original destination email');
  }
}
