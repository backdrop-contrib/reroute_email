<?php

/**
 * @file
 * Test the Reroute Email module.
 *
 */
class RerouteEmailTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Reroute Email test',
      'description' => 'Test Reroute Email modules ability to reroute mail.',
      'group' => 'Reroute Email',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('reroute_email', 'contact');
    $this->admin_user = $this->drupalCreateUser(array('administer contact forms', 'access site-wide contact form', 'administer reroute email'));
  }

  /**
   * Basic tests for reroute_email.
   */
  function testBasicNotification() {
    $reroute_destination = "rerouted@example.com";
    $original_destination = "original@example.com";
    $additional_destination = "additional@example.com";
    // Login the admin user.
    $this->drupalLogin($this->admin_user);

    // Configure to reroute normally to rerouted@example.com.
    $edit = array('reroute_email_address' => $reroute_destination, 'reroute_email_enable' => TRUE);
    $this->drupalPost("admin/config/development/reroute_email", $edit, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));

    // Go to the contact page and send an email.
    $edit = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $edit, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);;
    $this->assertMail('to', $reroute_destination, t("Email was rerouted to @address", array('@address' => $reroute_destination)));
    $searchFor = t("Originally to: <@to>", array('@to' => $original_destination));
    $hasInfo = preg_match("/$searchFor/", $mail['body']);
    $this->assertTrue($hasInfo, t('Found the correct "originally to" line in the body'));
    $this->verbose(t("Email body was:") . print_r("<pre>{$mail['body']}</pre>", TRUE));

    // Now try sending to one of the additional email addresses that should not be rerouted.
    // Configure two email addresses in reroute form.
    $edit = array('reroute_email_address' => "$reroute_destination, $additional_destination", 'reroute_email_enable' => TRUE);
    $this->drupalPost("admin/config/development/reroute_email", $edit, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));

    // Configure the contact settings to point to the additional recipient.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $additional_destination), t('Save'));

    // Go to the contact page and send an email.
    $edit = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $edit, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);;
    $this->assertMail('to', $additional_destination, t("Email was not rerouted because destination was in whitelist"));


    // Now change the configuration to send disable reroute and set the original email recipients.
    $edit = array('reroute_email_enable' => FALSE, 'reroute_email_address' => $reroute_destination);
    $this->drupalPost("admin/config/development/reroute_email", $edit, t('Save configuration'));
    $this->assertText(t("The configuration options have been saved."));
    // Set the contact form to send to original_destination.
    $this->drupalPost('admin/structure/contact/edit/1', array('recipients' => $original_destination), t('Save'));
    // Go to the contact page and send an email.
    $edit = array('subject' => "Test test test", 'message' => 'This is a test');
    $this->drupalPost("contact", $edit, t("Send message"));
    $this->assertText(t("Your message has been sent"));
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    // Mail should not be rerouted - should go to $original_destination.
    $this->assertMail('to', $original_destination, t("Mail not rerouted - sent to original destination."));
    $this->verbose(t("Email 'to' was:") . print_r("<pre>{$mail['to']}</pre>", TRUE));
  }
}
